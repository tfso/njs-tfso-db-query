{"version":3,"file":"querystream.js","sourceRoot":"","sources":["../../lib/querystream.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MsSql from 'mssql';\r\nimport { Query } from 'tfso-repository/dist/lib/repository/db/query';\r\nimport { IRecordSet, RecordSet } from 'tfso-repository/dist/lib/repository/db/recordset';\r\n\r\nabstract class QueryStream<TEntity> extends Query<TEntity> {\r\n    private _connection: MsSql.Connection;\r\n    private _transaction: MsSql.Transaction;\r\n\r\n    constructor(connection?: MsSql.Connection | MsSql.Transaction) {\r\n        super();\r\n\r\n        if (connection != null)\r\n            this.connection = connection;\r\n    }\r\n\r\n    public set connection(connection: MsSql.Transaction | MsSql.Connection) {\r\n        if (connection instanceof MsSql.Transaction) {\r\n            this._transaction = connection;\r\n            this._connection = connection.connection;\r\n        }\r\n        else {\r\n            this._connection = connection;\r\n        }\r\n    }\r\n\r\n    protected input(name: string, value: any): void\n    protected input(name: string, type: any, value: any): void\n    protected input(name: string, type: any, value?: any): void {\r\n        if (arguments.length == 2) {\r\n            value = type; type = null;\r\n        }\r\n\r\n        this.parameters[name] = { name: name, type: type, value: value };\r\n    }\r\n\r\n    protected executeQuery(): Promise<IRecordSet<TEntity>> {\r\n        return new Promise((resolve, reject) => {\r\n            let request = new MsSql.Request(), // thread safe as we have a request object for each promise\r\n                error: Error = null,\r\n                records: Array<TEntity> = [],\r\n                predicate: (entity: TEntity) => boolean,\r\n                timed: number;\r\n\r\n            request.stream = true;\r\n            request.connection = this._connection;\r\n            request.transaction = this._transaction;\r\n\r\n            predicate = this.predicate;\r\n\r\n            for (let key in super.parameters) {\r\n                let param = super.parameters[key];\r\n\r\n                request.input(param.name, param.type, param.value);\r\n            }\r\n\r\n            request.on('row', (row) => {\r\n                var entity = this.transform(row);\r\n\r\n                if (predicate(entity) === true)\r\n                    records.push(entity);\r\n            });\r\n\r\n            request.on('error', function (err) {\r\n                error = err;\r\n            });\r\n\r\n            request.on('done', function (affected) {\r\n                if (error != null)\r\n                    reject(error);\r\n                else\r\n                    resolve(new RecordSet(records, affected, (Date.now() - timed)));\r\n            });\r\n\r\n            timed = Date.now();\r\n            request.query(this.commandText);\r\n        })\r\n    }\r\n\r\n    protected abstract transform(record: any): TEntity;\r\n}\r\n\r\nexport default QueryStream"]}