{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../lib/connection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MsSql from 'mssql';\r\n\r\nexport default class Connection {\r\n    private _connectionString: MsSql.config;\r\n    \r\n    private _connection: MsSql.Connection = null;\r\n    private _transaction: MsSql.Transaction = null;\r\n\r\n    private _rolledback = false;\r\n\r\n    constructor(connectionString: MsSql.config) {\r\n        this._connectionString = <MsSql.config>connectionString;\r\n    }\r\n\r\n    public beginTransaction(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                if (this._transaction)\r\n                    reject(new Error('SqlConnection has a active transaction'));\r\n\r\n                this._connection = new MsSql.Connection(this._connectionString);\r\n                this._transaction = new MsSql.Transaction(this._connection);\r\n\r\n                this._rolledback = false;\r\n\r\n                this._transaction.on('rollback', (aborted) => {\r\n                    this._rolledback = true;\r\n                });\r\n\r\n                this._connection.connect()\r\n                    .then(() => {\r\n                        return this._transaction.begin();\r\n                    })\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        })\r\n    }\r\n\r\n    public commitTransaction(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                if (this._transaction == null)\r\n                    reject(new Error('SqlConnection has no active transaction'));\r\n\r\n\r\n                this._transaction.commit((err) => {\r\n                    this._transaction = null;\r\n\r\n                    if (this._connection && this._connection.connected)\r\n                        this._connection.close();\r\n\r\n                    return err ? reject(err) : resolve();\r\n                });\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        });\r\n    }\r\n\r\n    public rollbackTransaction(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                if (this._transaction == null)\r\n                    reject(new Error('SqlConnection has no active transaction'));\r\n\r\n                if (!this._rolledback) {\r\n                    this._transaction.rollback(function (err) {\r\n                        this._transaction = null;\r\n\r\n                        if (this._connection && this._connection.connected)\r\n                            this._connection.close();\r\n\r\n                        return err ? reject(err) : resolve();\r\n                    });\r\n                }\r\n                else {\r\n                    this._transaction = null;\r\n\r\n                    if (this._connection && this._connection.connected)\r\n                        this._connection.close();\r\n\r\n                    resolve();\r\n                }\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    public execute<U>(query: PromiseLike<U>): Promise<U>\r\n    public execute<U>(work: (connection: MsSql.Connection) => U | PromiseLike<U>): Promise<U>\r\n    public execute<U>(executable: any): Promise<U> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (this._transaction != null) {\r\n                    if (this._connection.connected == false)\r\n                        throw new Error('SqlConnection is missing an active connection for this transaction');\r\n\r\n                    if (typeof executable == 'function') {\r\n                        Promise.resolve(executable(this._transaction || this._connection)).then(resolve).catch(reject);\r\n                    } else {\r\n                        executable.connection = this._transaction || this._connection;\r\n                        Promise.resolve(executable).then(resolve).catch(reject);\r\n                    }\r\n                }\r\n                else {\r\n                    var connection = new MsSql.Connection(this._connectionString);\r\n\r\n                    connection.connect()\r\n                        .then(() => {\r\n                            if (typeof executable == 'function') {\r\n                                return executable(connection);\r\n                            } else {\r\n                                executable.connection = connection;\r\n                                return executable;\r\n                            }\r\n                        })\r\n                        .then((result) => {\r\n                            if (connection.connected)\r\n                                connection.close();\r\n\r\n                            resolve(result);\r\n                        })\r\n                        .catch(function (ex) {\r\n                            if (connection.connected)\r\n                                connection.close();\r\n\r\n                            reject(ex);\r\n                        })\r\n                }\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        });\r\n    }\r\n\r\n}"]}