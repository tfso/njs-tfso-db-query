{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../src/db/connection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MsSql from 'mssql';\r\nimport { Query } from 'tfso-repository/lib/repository/db/query';\r\nimport { IRecordSet, RecordSet } from 'tfso-repository/lib/repository/db/recordset';\r\n\r\nexport enum IsolationLevel {\r\n    ReadUncommitted,\r\n    ReadCommitted,\r\n    RepeatableRead,\r\n    Snapshot,\r\n    Serializable\r\n}\r\n\r\nexport default class Connection {\r\n    private _connectionString: PromiseLike<MsSql.config>;\r\n    \r\n    private _connection: MsSql.Connection = null;\r\n    private _transaction: MsSql.Transaction = null;\r\n\r\n    private _rolledback = false;\r\n\r\n    constructor(connectionString: MsSql.config | PromiseLike<MsSql.config>) {\r\n        this._connectionString = Promise.resolve(connectionString);\r\n    }\r\n\r\n    public async beginTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        \r\n        if (this._transaction)\r\n            throw new Error('SqlConnection has a active transaction');\r\n\r\n        let connectionString = await this._connectionString\r\n            \r\n        this._connection = new MsSql.Connection(connectionString);\r\n        this._transaction = new MsSql.Transaction(this._connection);\r\n        this._rolledback = false;\r\n\r\n        this._transaction.on('rollback', (aborted) => {\r\n            this._rolledback = true;\r\n        });\r\n\r\n        await this._connection.connect();\r\n        await this._transaction.begin(this.getIsolationLevel(isolationLevel));           \r\n    }\r\n\r\n    public async commitTransaction(): Promise<void> {\r\n        \r\n        if (this._transaction == null)\r\n            throw new Error('SqlConnection has no active transaction');\r\n\r\n        await this._transaction.commit();\r\n\r\n        this._transaction = null;\r\n\r\n        if (this._connection && this._connection.connected)\r\n            this._connection.close();\r\n    }\r\n\r\n    public async rollbackTransaction(): Promise<void> {       \r\n        if (this._transaction == null)\r\n            throw new Error('SqlConnection has no active transaction');\r\n\r\n        if (!this._rolledback)\r\n        {\r\n            let error: Error;\r\n\r\n            for (let tries = 0; tries < 5; tries++)\r\n            {\r\n                try\r\n                {\r\n                    error = null; // reset it for each try\r\n\r\n                    await this._transaction.rollback();\r\n\r\n                    break;\r\n                }\r\n                catch (ex)\r\n                {\r\n                    error = ex;\r\n\r\n                    if (ex.name == 'TransactionError')\r\n                    {\r\n                        await this.delay(1000);\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    throw ex;\r\n                }\r\n            }\r\n\r\n            this._transaction = null;\r\n\r\n            if (this._connection && this._connection.connected)\r\n                await this._connection.close();\r\n\r\n            throw error;\r\n        }\r\n        else {\r\n            this._transaction = null;\r\n\r\n            if (this._connection && this._connection.connected)\r\n                await this._connection.close();\r\n        }\r\n            \r\n    }\r\n\r\n    public execute<U>(query: Query<U>): Promise<IRecordSet<U>>\r\n    public execute<U>(work: (connection: MsSql.Connection) => IRecordSet<U> | PromiseLike<IRecordSet<U>>): Promise<IRecordSet<U>>\r\n    public execute<U>(executable: any): Promise<IRecordSet<U>> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (this._transaction != null) {\r\n                    if (this._connection.connected == false)\r\n                        throw new Error('SqlConnection is missing an active connection for this transaction');\r\n\r\n                    if (typeof executable == 'function') {\r\n                        Promise.resolve(executable(this._transaction || this._connection)).then(resolve).catch(reject);\r\n                    } else {\r\n                        executable.connection = this._transaction || this._connection;\r\n                        Promise.resolve(executable).then(resolve).catch(reject);\r\n                    }\r\n                }\r\n                else {\r\n                    this._connectionString\r\n                        .then((connectionString) => {\r\n                            var connection = new MsSql.Connection(connectionString);\r\n\r\n                            connection.connect()\r\n                                .then(() => {\r\n                                    if (typeof executable == 'function') {\r\n                                        return Promise.resolve(executable(connection))\r\n                                    } else {\r\n                                        executable.connection = connection;\r\n                                        return executable;\r\n                                    }\r\n                                })\r\n                                .then((result) => {\r\n                                    if (connection.connected)\r\n                                        connection.close();\r\n\r\n                                    resolve(result);\r\n                                })\r\n                                .catch((ex) => {\r\n                                    if (connection.connected)\r\n                                        connection.close();\r\n\r\n                                    reject(ex);\r\n                                })\r\n                        }, (err) => {\r\n                            reject(err);\r\n                        });\r\n                }\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getIsolationLevel(isolationLevel: IsolationLevel): MsSql.IIsolationLevel {\r\n\r\n        switch (isolationLevel) {\r\n            case IsolationLevel.ReadCommitted:\r\n                return MsSql.ISOLATION_LEVEL.READ_COMMITTED;\r\n\r\n            case IsolationLevel.ReadUncommitted:\r\n                return MsSql.ISOLATION_LEVEL.READ_UNCOMMITTED;\r\n\r\n            case IsolationLevel.RepeatableRead:\r\n                return MsSql.ISOLATION_LEVEL.REPEATABLE_READ;\r\n\r\n            case IsolationLevel.Serializable:\r\n                return MsSql.ISOLATION_LEVEL.SERIALIZABLE;\r\n\r\n            case IsolationLevel.Snapshot:\r\n                return MsSql.ISOLATION_LEVEL.SNAPSHOT\r\n            \r\n            default:\r\n                return MsSql.ISOLATION_LEVEL.READ_COMMITTED;\r\n        }\r\n    }\r\n\r\n    private delay(ms: number): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try\r\n            {\r\n                setTimeout(() => resolve, ms || 1);\r\n            }\r\n            catch (ex)\r\n            {\r\n                reject(ex);\r\n            }\r\n        })\r\n    }\r\n}"]}