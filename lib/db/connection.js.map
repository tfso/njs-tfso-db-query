{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../src/db/connection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MsSql from 'mssql';\nimport { Query } from 'tfso-repository/lib/repository/db/query';\nimport { IRecordSet, RecordSet } from 'tfso-repository/lib/repository/db/recordset';\n\nexport enum IsolationLevel {\n    ReadUncommitted,\n    ReadCommitted,\n    RepeatableRead,\n    Snapshot,\n    Serializable\n}\n\nexport default class Connection {\n    private static connectionPool: Map<string, MsSql.Connection> = new Map()\n\n    private _connectionString: PromiseLike<MsSql.config>;\n    \n    private _connection: MsSql.Connection = null;\n    private _transaction: MsSql.Transaction = null;\n\n    private _rolledback = false;\n\n    constructor(connectionString: MsSql.config | PromiseLike<MsSql.config>) {\n        this._connectionString = Promise.resolve(connectionString);\n    }\n\n    public async beginTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        \n        if (this._transaction)\n            throw new Error('SqlConnection has a active transaction');\n\n        let connectionString = await this._connectionString\n            \n        this._connection = new MsSql.Connection(connectionString);\n        this._transaction = new MsSql.Transaction(this._connection);\n        this._rolledback = false;\n\n        this._transaction.on('rollback', (aborted) => {\n            this._rolledback = true;\n        });\n\n        await this._connection.connect();\n        await this._transaction.begin(this.getIsolationLevel(isolationLevel));           \n    }\n\n    public async commitTransaction(): Promise<void> {\n        \n        if (this._transaction == null)\n            throw new Error('SqlConnection has no active transaction');\n\n        await this._transaction.commit();\n\n        this._transaction = null;\n\n        if (this._connection && this._connection.connected)\n            await this._connection.close();\n    }\n\n    public async rollbackTransaction(): Promise<void> {       \n        if (this._transaction == null)\n            throw new Error('SqlConnection has no active transaction');\n\n        if (!this._rolledback)\n        {\n            let error: Error;\n\n            for (let tries = 0; tries < 5; tries++)\n            {\n                try\n                {\n                    error = null; // reset it for each try\n\n                    await this._transaction.rollback();\n\n                    break;\n                }\n                catch (ex)\n                {\n                    error = ex;\n\n                    if (ex.name == 'TransactionError')\n                    {\n                        await this.delay(200);\n\n                        continue;\n                    }\n\n                    throw ex;\n                }\n            }\n\n            this._transaction = null;\n\n            if (this._connection && this._connection.connected)\n                await this._connection.close();\n\n            if(error)\n                throw error;\n        }\n        else {\n            this._transaction = null;\n\n            if (this._connection && this._connection.connected)\n                await this._connection.close();\n        }\n            \n    }\n\n    private async getConnection(connectionString: MsSql.config): Promise<MsSql.Connection> { \n        let pool: MsSql.Connection,\n            key = `${connectionString.server};${connectionString.port || -1};${connectionString.database};${connectionString.user}`\n\n        if( (pool = Connection.connectionPool.get(key)) == null) {\n            Connection.connectionPool.set(key, pool = new MsSql.Connection(connectionString))\n\n            pool.on('error', () => {\n                Connection.connectionPool.delete(key)\n            })\n        }\n\n        await this.assertConnected(pool, connectionString.connectionTimeout || 15000)\n\n        return pool\n    }\n\n    private async assertConnected(pool: MsSql.Connection, timeout: number = 15000): Promise<void> {\n        if(pool.connecting == true) {\n            return new Promise<void>(async (resolve, reject) => {\n                let time = Number(timeout) || 15000,\n                    interval = 100,\n                    thread: NodeJS.Timer\n\n                try {\n                    let asserter = async() => {\n                        try {\n                            if(pool.connected == true) {\n                                if(thread)\n                                    clearTimeout(thread)\n\n                                resolve()\n                            }\n                            else if( (time -= interval) < 0) {\n                                if(thread)\n                                    clearTimeout(thread)\n\n                                reject(new Error(`Connection could not be established within timeout`))\n                            }\n                        }\n                        catch(ex) {\n                            reject(ex)\n                        }\n                    }\n\n                    thread = setInterval(asserter, interval)\n                }\n                catch(ex) {\n                    if(thread)\n                        clearTimeout(thread);\n\n                    reject(ex)\n                }\n            })\n        }\n        else if(pool.connected == false) {\n            await pool.connect()\n        }\n    }\n\n    public execute<U>(query: Query<U>): Promise<IRecordSet<U>>\n    public execute<U>(work: (connection: MsSql.Connection) => IRecordSet<U> | PromiseLike<IRecordSet<U>>): Promise<IRecordSet<U>>\n    public execute<U>(executable: any): Promise<IRecordSet<U>> {\n        return new Promise((resolve, reject) => {\n            try {\n                if (this._transaction != null) {\n                    if (this._connection.connected == false)\n                        throw new Error('SqlConnection is missing an active connection for this transaction');\n\n                    if (typeof executable == 'function') {\n                        Promise.resolve(executable(this._transaction || this._connection)).then(resolve).catch(reject);\n                    } else {\n                        executable.connection = this._transaction || this._connection;\n                        Promise.resolve(executable).then(resolve).catch(reject);\n                    }\n                }\n                else {\n                    Promise.resolve(this._connectionString)\n                        .then((connectionString) => {\n                            try {\n                                return this.getConnection(connectionString)\n                                    .then((connection) => {\n                                        if (typeof executable == 'function') {\n                                            return Promise.resolve(executable(connection))\n                                        } else {\n                                            executable.connection = connection;\n                                            return executable;\n                                        }\n                                    })\n                                    .then((result) => {\n                                        // if (connection.connected)\n                                        //     connection.close();\n\n                                        resolve(result);\n                                    })\n                                    .catch((ex) => {\n                                        // if (connection.connected)\n                                        //     connection.close();\n\n                                        reject(ex);\n                                    })\n                                    \n                            }\n                            catch(ex) {\n                                reject(ex);\n                            }\n                        }, (err) => {\n                            reject(err);\n                        })\n                        .catch(err => {\n                            reject(err)\n                        })\n                }\n            }\n            catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    private getIsolationLevel(isolationLevel: IsolationLevel): MsSql.IIsolationLevel {\n\n        switch (isolationLevel) {\n            case IsolationLevel.ReadCommitted:\n                return MsSql.ISOLATION_LEVEL.READ_COMMITTED;\n\n            case IsolationLevel.ReadUncommitted:\n                return MsSql.ISOLATION_LEVEL.READ_UNCOMMITTED;\n\n            case IsolationLevel.RepeatableRead:\n                return MsSql.ISOLATION_LEVEL.REPEATABLE_READ;\n\n            case IsolationLevel.Serializable:\n                return MsSql.ISOLATION_LEVEL.SERIALIZABLE;\n\n            case IsolationLevel.Snapshot:\n                return MsSql.ISOLATION_LEVEL.SNAPSHOT\n            \n            default:\n                return MsSql.ISOLATION_LEVEL.READ_COMMITTED;\n        }\n    }\n\n    private delay(ms: number): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try\n            {\n                setTimeout(resolve, ms || 1);\n            }\n            catch (ex)\n            {\n                reject(ex);\n            }\n        })\n    }\n}"]}