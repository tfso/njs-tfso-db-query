{"version":3,"file":"queryrecordset.js","sourceRoot":"","sources":["../../src/db/queryrecordset.ts"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAAsB,yCAAyC,CAAC,CAAA;AAChE,0BAAsC,6CAA6C,CAAC,CAAA;AAqE3E,iBAAS;AAnElB;IAAsD,kCAAc;IAIhE,wBAAY,UAAiD;QACzD,iBAAO,CAAC;QAER,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAC;IAED,sBAAW,sCAAU;aAArB,UAAsB,UAAgD;YAClE,EAAE,CAAC,CAAC,UAAU,YAAY,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;gBAC/B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC;YAC7C,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAClC,CAAC;QACL,CAAC;;;OAAA;IAIS,8BAAK,GAAf,UAAgB,IAAY,EAAE,IAAS,EAAE,KAAW;QAChD,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,KAAK,GAAG,IAAI,CAAC;YAAC,IAAI,GAAG,IAAI,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACrE,CAAC;IAES,qCAAY,GAAtB;QAAA,iBA6BC;QA5BG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,CAAC;gBACD,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE,2DAA2D;gBAC1F,OAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAEvB,OAAO,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;gBAE9B,OAAO,CAAC,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC;gBACtC,OAAO,CAAC,WAAW,GAAG,KAAI,CAAC,YAAY,CAAC;gBAExC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC9B,IAAI,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;oBAEjC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;gBACvD,CAAC;gBAED,OAAO,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,EAAE,UAAC,GAAG,EAAE,SAAS,EAAE,YAAY;oBACzD,EAAE,CAAC,CAAC,GAAG,CAAC;wBACJ,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAEvB,OAAO,CAAC,IAAI,qBAAS,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,OAAK,CAAC,CAAC,CAAC;gBACpI,CAAC,CAAC,CAAC;YACP,CACA;YAAA,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,EAAE,CAAC,CAAC;YACf,CAAC;QAEL,CAAC,CAAC,CAAA;IACN,CAAC;IAGL,qBAAC;AAAD,CAAC,AA/DD,CAAsD,aAAK,GA+D1D;AA/DqB,sBAAc,iBA+DnC,CAAA;AAED;kBAAe,cAAc,CAAA;AAET","sourcesContent":["import * as MsSql from 'mssql';\r\nimport { Query } from 'tfso-repository/lib/repository/db/query';\r\nimport { IRecordSet, RecordSet } from 'tfso-repository/lib/repository/db/recordset';\r\n\r\nexport abstract class QueryRecordSet<TEntity> extends Query<TEntity> {\r\n    private _connection: MsSql.Connection;\r\n    private _transaction: MsSql.Transaction;\r\n\r\n    constructor(connection?: MsSql.Connection | MsSql.Transaction) {\r\n        super();\r\n\r\n        if (connection != null)\r\n            this.connection = connection;\r\n    }\r\n\r\n    public set connection(connection: MsSql.Transaction | MsSql.Connection) {\r\n        if (connection instanceof MsSql.Transaction) {\r\n            this._transaction = connection;\r\n            this._connection = connection.connection;\r\n        }\r\n        else {\r\n            this._connection = connection;\r\n        }\r\n    }\r\n\r\n    protected input(name: string, value: any): void\n    protected input(name: string, type: any, value: any): void\n    protected input(name: string, type: any, value?: any): void {\r\n        if (arguments.length == 2) {\r\n            value = type; type = null;\r\n        }\r\n\r\n        this.parameters[name] = { name: name, type: type, value: value };\r\n    }\r\n\r\n    protected executeQuery(): Promise<RecordSet<TEntity>> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                let request = new MsSql.Request(), // thread safe as we have a request object for each promise\r\n                    timed = Date.now();\r\n\r\n                request = new MsSql.Request();\r\n\r\n                request.connection = this._connection;\r\n                request.transaction = this._transaction;\r\n\r\n                for (let key in this.parameters) {\r\n                    let param = this.parameters[key];\r\n\r\n                    request.input(param.name, param.type, param.value);\r\n                }\r\n\r\n                request.query(this.commandText, (err, recordset, rowsAffected) => {\r\n                    if (err)\r\n                        return reject(err);\r\n\r\n                    resolve(new RecordSet(recordset ? recordset.map(this.transform).filter(this.predicate) : [], rowsAffected, Date.now() - timed));\r\n                });\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    protected abstract transform(record: any): TEntity;\r\n}\r\n\r\nexport default QueryRecordSet\r\n\r\nexport { RecordSet }"]}