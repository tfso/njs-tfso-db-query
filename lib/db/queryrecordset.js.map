{"version":3,"file":"queryrecordset.js","sourceRoot":"","sources":["../../src/db/queryrecordset.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MsSql from 'mssql';\r\nimport { Query } from 'tfso-repository/lib/repository/db/query';\r\nimport { IRecordSet, RecordSet } from 'tfso-repository/lib/repository/db/recordset';\r\n\r\nimport { WhereOperator } from 'tfso-repository/lib/linq/operators/whereoperator';\r\nimport { SkipOperator } from 'tfso-repository/lib/linq/operators/skipoperator';\r\nimport { TakeOperator } from 'tfso-repository/lib/linq/operators/takeoperator';\r\n\r\nexport abstract class QueryRecordSet<TEntity> extends Query<TEntity> {\r\n    private _connection: MsSql.Connection;\r\n    private _transaction: MsSql.Transaction;\r\n\r\n    constructor(connection?: MsSql.Connection | MsSql.Transaction) {\r\n        super();\r\n\r\n        if (connection != null)\r\n            this.connection = connection;\r\n    }\r\n\r\n    public set connection(connection: MsSql.Transaction | MsSql.Connection) {\r\n        if (connection instanceof MsSql.Transaction) {\r\n            this._transaction = connection;\r\n            this._connection = connection.connection;\r\n        }\r\n        else {\r\n            this._connection = connection;\r\n        }\r\n    }\r\n\r\n    protected get readLock(): boolean {\r\n        return this._transaction ? true : false;\r\n    }\r\n\r\n    protected input(name: string, value: any): void\r\n    protected input(name: string, type: any, value: any): void\r\n    protected input(name: string, type: any, value?: any): void {\r\n        if (arguments.length == 2) {\r\n            value = type; type = null;\r\n        }\r\n\r\n        this.parameters[name] = { name: name, type: type, value: value };\r\n    }\r\n\r\n    protected createRequest(): MsSql.Request {\r\n        return new MsSql.Request();\r\n    }\r\n\r\n    protected executeQuery(): Promise<RecordSet<TEntity>> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                let request = this.createRequest(), // thread safe as we have a request object for each promise\r\n                    predicate: (entity: TEntity) => boolean,\r\n                    timed = Date.now(),\r\n                    totalRecords = -1;\r\n\r\n                request.multiple = true;\r\n                request.connection = this._connection;\r\n                request.transaction = this._transaction;\r\n\r\n                for (let key in this.parameters) {\r\n                    let param = this.parameters[key];\r\n\r\n                    if(param.type == null)\r\n                        request.input(param.name, param.value);\r\n                    else\r\n                        request.input(param.name, param.type, param.value);\r\n                }\r\n\r\n                request.query(this.commandText, (err, recordset, rowsAffected) => {\r\n                    if (err)\r\n                        return reject(err);\r\n\r\n                    try {\r\n                        let results: Array<any> = [];\r\n\r\n                        for (let i = 0; i < recordset.length; i++) {\r\n                            // go through each recordst and check for totalRecords\r\n                            if (totalRecords == -1) {\r\n                                let row: any = null;\r\n\r\n                                if (Array.isArray(recordset[i]) && recordset[i].length > 0)\r\n                                    row = recordset[i][0];\r\n\r\n                                if (row) {\r\n                                    if (row['pagingTotalCount'] && isNaN(row['pagingTotalCount']) == false) {\r\n                                        totalRecords = Number(row['pagingTotalCount'])\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // set last recordset as the result recordset\r\n                            results = recordset[i];\r\n                        }\r\n\r\n                        // should really validate this.query to see if operators Where, Skip, Take, OrderBy etc comes in correct order otherwhise it's not supported for this kind of database\r\n                        let where = this.query.operations.first(WhereOperator),\r\n                            predicate: (entity: TEntity) => boolean,\r\n                            entities: Array<TEntity>;\r\n\r\n                        if (where) {\r\n                            this.query.operations.remove(where);\r\n\r\n                            predicate = where.predicate;\r\n                        }\r\n\r\n                        entities = results.map(this.transform);\r\n                        if (predicate) {\r\n                            entities = entities.filter(predicate);\r\n\r\n                            if (this.query.operations.first(SkipOperator) || this.query.operations.first(TakeOperator))\r\n                                totalRecords = entities.length;\r\n                        }\r\n\r\n                        resolve(new RecordSet(recordset ? this.query.toArray(entities) : [], rowsAffected, Date.now() - timed, totalRecords >= 0 ? totalRecords : undefined));\r\n                    }\r\n                    catch (ex) {\r\n                        reject(ex);\r\n                    }\r\n                });\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    protected abstract transform(record: any): TEntity;\r\n}\r\n\r\nexport default QueryRecordSet\r\n\r\nexport { RecordSet }"]}