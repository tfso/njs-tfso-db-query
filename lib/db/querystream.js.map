{"version":3,"file":"querystream.js","sourceRoot":"","sources":["../../src/db/querystream.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MsSql from 'mssql';\r\nimport Enumerable from 'tfso-repository'\r\n\r\nimport { Query } from 'tfso-repository/lib/repository/db/query';\r\nimport { IRecordSet, RecordSet } from 'tfso-repository/lib/repository/db/recordset';\r\n\r\nimport { WhereOperator } from 'tfso-repository/lib/linq/operators/whereoperator';\r\nimport { SkipOperator } from 'tfso-repository/lib/linq/operators/skipoperator';\r\nimport { TakeOperator } from 'tfso-repository/lib/linq/operators/takeoperator';\r\n\r\nexport abstract class QueryStream<TEntity> extends Query<TEntity> {\r\n    private _connection: MsSql.Connection;\r\n    private _transaction: MsSql.Transaction;\r\n\r\n    private _ignoreReadLocks: Array<MsSql.IIsolationLevel> = []\r\n\r\n    constructor(connection?: MsSql.Connection | MsSql.Transaction, ignoreReadLock?: Array<MsSql.IIsolationLevel>) \r\n    constructor(ignoreReadLock?: Array<MsSql.IIsolationLevel>) \r\n    constructor() {\r\n        super();\r\n\r\n        let connection: MsSql.Connection | MsSql.Transaction,\r\n            ignoreReadLock = []\r\n\r\n        switch(arguments.length) {\r\n            case 2:\r\n                if(arguments[0] instanceof MsSql.Connection || arguments[0] instanceof MsSql.Transaction)\r\n                    connection = arguments[0]\r\n\r\n                if(Array.isArray(arguments[1])) \r\n                    ignoreReadLock = arguments[1]\r\n\r\n                break\r\n\r\n            default:\r\n                if(arguments[0] instanceof MsSql.Connection || arguments[0] instanceof MsSql.Transaction)\r\n                    connection = arguments[0]\r\n\r\n                if(Array.isArray(arguments[0]))\r\n                    ignoreReadLock = arguments[0]\r\n\r\n                break\r\n        }\r\n\r\n        if (connection != null)\r\n            this.connection = connection;\r\n\r\n        this._ignoreReadLocks.push(...ignoreReadLock)\r\n    }\r\n\r\n    public set connection(connection: MsSql.Transaction | MsSql.Connection) {\r\n        if (connection instanceof MsSql.Transaction) {\r\n            this._transaction = connection;\r\n            this._connection = connection.connection;\r\n        }\r\n        else {\r\n            this._connection = connection;\r\n        }\r\n    }\r\n\r\n    protected get readLock(): boolean {\r\n        if(this._transaction) {\r\n            if(this._ignoreReadLocks && this._ignoreReadLocks.includes(this._transaction.isolationLevel))\r\n                return false\r\n\r\n            return true\r\n        }\r\n        \r\n        return false\r\n    }\r\n\r\n    protected input(name: string, value: any): void\r\n    protected input(name: string, type: any, value: any): void\r\n    protected input(name: string, type: any, value?: any): void {\r\n        if (arguments.length == 2) {\r\n            value = type; type = null;\r\n        }\r\n\r\n        this.parameters[name] = { name: name, type: type, value: value };\r\n    }\r\n\r\n    protected createRequest(): MsSql.Request {\r\n        return new MsSql.Request();\r\n    }\r\n\r\n    protected executeQuery(): Promise<IRecordSet<TEntity>> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                let request = this.createRequest(), // thread safe as we have a request object for each promise\r\n                    error: Error = null,\r\n                    records: Array<TEntity> = [],\r\n                    totalRecords: number = -1,\r\n                    totalPredicateIterations: number = 0,\r\n                    predicate: (entity: TEntity) => boolean,\r\n                    timed: number,\r\n                    cancelled: boolean = false,\r\n                    completed: boolean = false;\r\n\r\n                request.stream = true;\r\n                request.multiple = true;\r\n                request.connection = this._connection;\r\n                request.transaction = this._transaction;\r\n\r\n                var skip: number = undefined, skipped: number = 0, skipOperator: SkipOperator<TEntity> = null,\r\n                    take: number = undefined, taken: number = 0, takeOperator: TakeOperator<TEntity> = null;\r\n\r\n                for (let operator of this.query.operations.values())\r\n                {\r\n                    if (operator instanceof WhereOperator)\r\n                    {\r\n                        if (predicate == null)\r\n                            predicate = operator.predicate;\r\n                        else\r\n                            break;\r\n                    }\r\n\r\n                    else if (skip == null && operator instanceof SkipOperator)\r\n                    {\r\n                        skipOperator = operator;\r\n                        skip = (<SkipOperator<TEntity>>operator).count;\r\n                    }\r\n\r\n                    else if (take == null && operator instanceof TakeOperator)\r\n                    {\r\n                        takeOperator = operator;\r\n                        take = (<TakeOperator<TEntity>>operator).count;\r\n                    }\r\n                }\r\n\r\n                if (skipOperator != null) this.query.operations.remove(skipOperator); // we are manually skipping, remove it from enumerable\r\n                if (takeOperator != null) this.query.operations.remove(takeOperator); // we are manually taking, remove it from enumerable\r\n\r\n\r\n                if (predicate == null)\r\n                    predicate = (entity) => true;\r\n\r\n                for (let key in this.parameters) {\r\n                    let param = this.parameters[key];\r\n\r\n                    if (param.type == null)\r\n                        request.input(param.name, param.value);\r\n                    else\r\n                        request.input(param.name, param.type, param.value);\r\n                }\r\n\r\n                request.on('recordset', (columns) => {\r\n                    if (totalRecords < 0)\r\n                        totalRecords = -1; // reset totalRecords if it isn't set\r\n\r\n                    records.length = 0;\r\n                    skipped = 0;\r\n                    taken = 0;\r\n                });\r\n\r\n                request.on('row', (row) => {\r\n                    var entity: TEntity = null;\r\n\r\n                    if (cancelled)\r\n                        return;\r\n\r\n                    try {\r\n                        if (totalRecords == -1) {\r\n                            // only go here at first row in any recordset if it isn't set\r\n                            if (row['pagingTotalCount'] && isNaN(row['pagingTotalCount']) == false)\r\n                                totalRecords = Number(row['pagingTotalCount'])\r\n                            else\r\n                                totalRecords = -2;\r\n                        }\r\n\r\n                        if (completed == false || (completed == true && skip != null)) { // if completed and query is trying to get paging total count we have to count them as predicate will narrow down result even more\r\n                            entity = this.transform(row);\r\n\r\n                            if (predicate(entity) === true) {\r\n                                if (skip == null || ++skipped > skip) {\r\n                                    if (take == null || ++taken <= take)\r\n                                        records.push(entity);\r\n                                    else\r\n                                        completed = true;\r\n                                }\r\n\r\n                                totalPredicateIterations++;\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                        cancelled = true;\r\n                        error = ex;\r\n                    }\r\n                });\r\n\r\n                request.on('error', (err) => {\r\n                    error = err;\r\n                });\r\n\r\n                request.on('done', (affected) => {\r\n                    if (error != null)\r\n                        reject(this.transformError(error));\r\n                    else\r\n                        resolve(new RecordSet(records, affected, (Date.now() - timed), skip != null ? totalPredicateIterations : (totalRecords >= 0 ? totalRecords : undefined) ));\r\n                });\r\n\r\n                timed = Date.now();\r\n                request.query(this.commandText);\r\n            }\r\n            catch (ex) {\r\n                reject(this.transformError(ex));\r\n            }\r\n        })\r\n    }\r\n\r\n    protected abstract transform(record: any): TEntity;\r\n\r\n    private transformError(err: Error): Error {\r\n        try {\r\n            return Object.assign(err, { \r\n                _sql: this.commandText, \r\n                _parameters: Object\r\n                    .entries(this.parameters)\r\n                    .reduce((out, [key, { value }]) => { \r\n                        out[key] = value; \r\n                        return out \r\n                    }, {}) \r\n            })\r\n        }\r\n        catch(ex) {\r\n            return err\r\n        }\r\n    }\r\n}\r\n\r\nexport default QueryStream\r\n\r\nexport { RecordSet }"]}