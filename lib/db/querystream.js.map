{"version":3,"file":"querystream.js","sourceRoot":"","sources":["../../src/db/querystream.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MsSql from 'mssql';\r\nimport { Query } from 'tfso-repository/lib/repository/db/query';\r\nimport { IRecordSet, RecordSet } from 'tfso-repository/lib/repository/db/recordset';\r\n\r\nimport { WhereOperator } from 'tfso-repository/lib/linq/operators/whereoperator';\r\nimport { SkipOperator } from 'tfso-repository/lib/linq/operators/skipoperator';\r\nimport { TakeOperator } from 'tfso-repository/lib/linq/operators/takeoperator';\r\n\r\nexport abstract class QueryStream<TEntity> extends Query<TEntity> {\r\n    private _connection: MsSql.Connection;\r\n    private _transaction: MsSql.Transaction;\r\n\r\n    constructor(connection?: MsSql.Connection | MsSql.Transaction) {\r\n        super();\r\n\r\n        if (connection != null)\r\n            this.connection = connection;\r\n    }\r\n\r\n    public set connection(connection: MsSql.Transaction | MsSql.Connection) {\r\n        if (connection instanceof MsSql.Transaction) {\r\n            this._transaction = connection;\r\n            this._connection = connection.connection;\r\n        }\r\n        else {\r\n            this._connection = connection;\r\n        }\r\n    }\r\n\r\n    protected get readLock(): boolean {\r\n        return this._transaction ? true : false;\r\n    }\r\n\r\n    protected input(name: string, value: any): void\r\n    protected input(name: string, type: any, value: any): void\r\n    protected input(name: string, type: any, value?: any): void {\r\n        if (arguments.length == 2) {\r\n            value = type; type = null;\r\n        }\r\n\r\n        this.parameters[name] = { name: name, type: type, value: value };\r\n    }\r\n\r\n    protected createRequest(): MsSql.Request {\r\n        return new MsSql.Request();\r\n    }\r\n\r\n    protected executeQuery(): Promise<IRecordSet<TEntity>> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                let request = this.createRequest(), // thread safe as we have a request object for each promise\r\n                    error: Error = null,\r\n                    records: Array<TEntity> = [],\r\n                    totalRecords: number = -1,\r\n                    totalPredicateIterations: number = 0,\r\n                    predicate: (entity: TEntity) => boolean,\r\n                    timed: number,\r\n                    cancelled: boolean = false,\r\n                    completed: boolean = false;\r\n\r\n                request.stream = true;\r\n                request.multiple = true;\r\n                request.connection = this._connection;\r\n                request.transaction = this._transaction;\r\n\r\n                var skip: number = undefined, skipped: number = 0,\r\n                    take: number = undefined, taken: number = 0;\r\n\r\n                for (let operator of this.query.operations.values()) {\r\n\r\n                    if (predicate == null && operator instanceof WhereOperator)\r\n                        predicate = operator.predicate;\r\n\r\n                    else if (skip == null && operator instanceof SkipOperator)\r\n                        skip = (<SkipOperator<TEntity>>operator).count;\r\n\r\n                    else if (take == null && operator instanceof TakeOperator)\r\n                        take = (<TakeOperator<TEntity>>operator).count;\r\n                }\r\n\r\n                if (predicate == null)\r\n                    predicate = (entity) => true;\r\n\r\n                for (let key in this.parameters) {\r\n                    let param = this.parameters[key];\r\n\r\n                    if (param.type == null)\r\n                        request.input(param.name, param.value);\r\n                    else\r\n                        request.input(param.name, param.type, param.value);\r\n                }\r\n\r\n                request.on('recordset', (columns) => {\r\n                    if (totalRecords < 0)\r\n                        totalRecords = -1; // reset totalRecords if it isn't set\r\n\r\n                    records.length = 0;\r\n                    skipped = 0;\r\n                    taken = 0;\r\n                });\r\n\r\n                request.on('row', (row) => {\r\n                    var entity: TEntity = null;\r\n\r\n                    if (cancelled)\r\n                        return;\r\n\r\n                    try {\r\n                        if (totalRecords == -1) {\r\n                            // only go here at first row in any recordset if it isn't set\r\n                            if (row['pagingTotalCount'] && isNaN(row['pagingTotalCount']) == false)\r\n                                totalRecords = Number(row['pagingTotalCount'])\r\n                            else\r\n                                totalRecords = -2;\r\n                        }\r\n\r\n                        if (completed == false || (completed == true && totalRecords > 0)) { // if completed and query is trying to get paging total count we have to count them as predicate will narrow down result even more\r\n                            entity = this.transform(row);\r\n\r\n                            if (predicate(entity) === true) {\r\n                                if (skip == null || ++skipped > skip) {\r\n                                    if (take == null || ++taken <= take)\r\n                                        records.push(entity);\r\n                                    else\r\n                                        completed = true;\r\n                                }\r\n\r\n                                totalPredicateIterations++;\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                        cancelled = true;\r\n                        error = ex;\r\n                    }\r\n                });\r\n\r\n\r\n\r\n                request.on('error', (err) => {\r\n                    error = err;\r\n                });\r\n\r\n                request.on('done', (affected) => {\r\n                    if (error != null)\r\n                        reject(error);\r\n                    else\r\n                        resolve(new RecordSet(records, affected, (Date.now() - timed), totalRecords >= 0 ? (skipped > 0 ? totalPredicateIterations : totalRecords) : undefined));\r\n                });\r\n\r\n                timed = Date.now();\r\n                request.query(this.commandText);\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        })\r\n    }\r\n\r\n    protected abstract transform(record: any): TEntity;\r\n}\r\n\r\nexport default QueryStream\r\n\r\nexport { RecordSet }"]}