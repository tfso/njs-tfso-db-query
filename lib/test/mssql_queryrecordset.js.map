{"version":3,"file":"mssql_queryrecordset.js","sourceRoot":"","sources":["../../src/test/mssql_queryrecordset.ts"],"names":[],"mappings":"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","sourcesContent":["import assert = require('assert');\r\nimport { QueryRecordSet, RecordSet } from './../db/queryrecordset';\r\n\r\ndescribe(\"When using QueryTemplate for MsSql queries\", () => {\r\n    var myQuery: SelectOne;\r\n\r\n    beforeEach(() => {\r\n        myQuery = new SelectOne(1);\r\n    })\r\n\r\n    it(\"should return a model\", (done) => {\r\n        myQuery.then(\r\n            (model) => {\r\n                if (model != null && model.length > 0 && model.records[0].no == 1)\r\n                    done();\r\n                else\r\n                    done(new Error('Expected a model with property \"no\" equal 1'));\r\n            },\r\n            done\r\n        );\r\n    });\r\n\r\n    it(\"should handle multiple thens\", (done) => {\r\n        myQuery\r\n            .then((model) => {\r\n                return model.length > 0 ? model.records[0] : null;\r\n            })\r\n            .then((model) => {\r\n                if (model != null && model.no == 1)\r\n                    done();\r\n                else\r\n                    done(new Error('Expected a model with property \"no\" equal 1'));\r\n            })\r\n            .catch(done);\r\n    });\r\n\r\n    it(\"should fail for driver/query problems\", (done) => {\r\n\r\n        myQuery.shouldFail = true;\r\n\r\n        myQuery\r\n            .then((model) => {\r\n                done(new Error('Expected Query promise to fail'));\r\n            }, (err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n\r\n    it(\"should fail for driver/query problems using catch\", (done) => {\r\n\r\n        myQuery.shouldFail = true;\r\n\r\n        myQuery\r\n            .then((model) => {\r\n                done(new Error('Expected Query promise to fail'));\r\n            })\r\n            .catch((err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n\r\n    it(\"should fail for driver/query problems using only catch\", (done) => {\r\n\r\n        myQuery.shouldFail = true;\r\n\r\n        myQuery\r\n            .catch((err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n\r\n    it(\"should fail for driver/query problems using nested catch\", (done) => {\r\n        myQuery.shouldFail = true;\r\n\r\n        Promise.resolve(\r\n            myQuery.then(() => {\r\n                done(new Error('Never going to hit'));\r\n            })\r\n        )\r\n            .catch((err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n});\r\n\r\n\r\ninterface IModel {\r\n    no: number\r\n    name: string\r\n}\r\n\r\nclass SelectOne extends QueryRecordSet<IModel>\r\n{\r\n    // for mocking\r\n    public shouldFail = false;\r\n\r\n    constructor(no: number) {\r\n        super();\r\n\r\n        this.input(\"num\", no);\r\n        this.commandText = \"SELECT 1 AS no, 'Tekst' AS name WHERE 1 = @num\";\r\n    }\r\n\r\n    protected transform(record) {\r\n        return <IModel>{\r\n            no: record.no,\r\n            name: record.name\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Overriding for mocking as we don't have a valid MsSql connection and request\r\n     */\r\n    protected executeQuery() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.shouldFail == false) {\r\n\r\n                if (this.parameters[\"num\"].value == 1) {\r\n                    resolve(new RecordSet<IModel>(\r\n                        new Array({\r\n                            no: 1, name: 'Tekst'\r\n                        }).map(this.transform)\r\n                    ))\r\n                }\r\n                else {\r\n                    resolve(new RecordSet<IModel>(new Array().map(this.transform)));\r\n                }\r\n            }\r\n            else {\r\n                reject(new Error('Internal MsSql error'));\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n"]}