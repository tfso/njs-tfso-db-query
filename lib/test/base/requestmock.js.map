{"version":3,"file":"requestmock.js","sourceRoot":"","sources":["../../../src/test/base/requestmock.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAE/B,MAAa,WAAY,SAAQ,KAAK,CAAC,OAAO;IAC1C,YAAoB,IAAgB,EAAU,aAAsB,KAAK;QACrE,KAAK,EAAE,CAAC;QADQ,SAAI,GAAJ,IAAI,CAAY;QAAU,eAAU,GAAV,UAAU,CAAiB;IAEzE,CAAC;IAUM,KAAK;QACR,QAAO,SAAS,CAAC,MAAM,EAAE;YACrB,KAAK,CAAC;gBACF,IAAI,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE;oBACxB,SAAS,CAAC,CAAC,CAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;iBAC9J;gBAED,MAAM;YAEV,KAAK,CAAC;gBACF,IAAI,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;oBACjC,IAAI,IAAI,CAAC,UAAU,EAAE;wBACjB,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;qBAC1D;yBAAM;wBACH,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAElE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACvC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;yBACnC;qBACJ;oBACD,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAEtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;qBAAM;oBACH,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACrC;SACR;IACL,CAAC;IAMM,KAAK;QACR,QAAQ,SAAS,CAAC,MAAM,EAAE;YACtB,KAAK,CAAC;gBACF,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAEvC,KAAK,CAAC;gBACF,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;SAC3D;IACL,CAAC;IAIM,IAAI;QACP,QAAQ,SAAS,CAAC,MAAM,EAAE;YACtB,KAAK,CAAC;gBACF,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAEvC,KAAK,CAAC;gBACF,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;SAC3D;IACL,CAAC;CACJ;AAnED,kCAmEC","sourcesContent":["import * as MsSql from 'mssql';\r\n\r\nexport class RequestMock extends MsSql.Request {\r\n    constructor(private data: Array<any>, private shouldFail: boolean = false) {\r\n        super();\r\n    }\r\n\r\n    //public set multiple(value: boolean) {\r\n    //    this._multiple = value;\r\n    //}\r\n\r\n    public query(command: string): Promise<void>;\r\n    public query<Entity>(command: string): Promise<MsSql.IRecordSet<Entity[]>>;\r\n    public query(command: string, callback: (err?: any, recordset?: any, rowsAffected?: number) => void): void;\r\n    public query<Entity>(command: string, callback: (err?: any, recordset?: Entity[]) => void): void;\r\n    public query() {\r\n        switch(arguments.length) {\r\n            case 2:\r\n                if (typeof arguments[1] == 'function') {\r\n                    (<Function>arguments[1]).apply(arguments[1], [this.shouldFail ? new Error('Internal MsSql error') : null, (this.multiple ? [ this.data ] : this.data), 0]);\r\n                }\r\n\r\n                break;\r\n\r\n            case 1:\r\n                if (super.listenerCount('done') > 0) {\r\n                    if (this.shouldFail) {\r\n                        super.emit('error', new Error('Internal MsSql error'));\r\n                    } else {\r\n                        super.emit('recordset', Object.getOwnPropertyNames(this.data[0]));\r\n\r\n                        for (let i = 0; i < this.data.length; i++) {\r\n                            super.emit('row', this.data[i]);\r\n                        }\r\n                    }\r\n                    super.emit('done', 0);\r\n\r\n                    return Promise.resolve();\r\n                } else {\r\n                    return Promise.resolve(this.data);\r\n                }\r\n        }\r\n    }\r\n\r\n    public batch<Entity>(batch: string): Promise<MsSql.IRecordSet<Entity>>;\r\n    public batch<Entity>(batch: string): Promise<Entity[]>;\r\n    public batch(batch: string, callback: (err?: any, recordset?: any) => void): void;\r\n    public batch<Entity>(batch: string, callback: (err?: any, recordset?: Entity[]) => void): void;\r\n    public batch() {\r\n        switch (arguments.length) {\r\n            case 2:\r\n                throw new Error('Not implemented');\r\n\r\n            case 1:\r\n                return Promise.reject(new Error('Not implemented'));\r\n        }\r\n    }\r\n\r\n    public bulk(table: MsSql.Table): Promise<number>;\r\n    public bulk(table: MsSql.Table, callback: (err: Error, rowCount: any) => void): void;\r\n    public bulk() {\r\n        switch (arguments.length) {\r\n            case 2:\r\n                throw new Error('Not implemented');\r\n\r\n            case 1:\r\n                return Promise.reject(new Error('Not implemented'));\r\n        }\r\n    }\r\n}"]}