{"version":3,"file":"querystream.js","sourceRoot":"","sources":["../../src/test/querystream.ts"],"names":[],"mappings":"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","sourcesContent":["import assert = require('assert');\r\n\r\nimport * as MsSql from 'mssql';\r\n\r\nimport { QueryStream } from './../db/querystream';\r\nimport { RequestMock } from './base/requestmock';\r\n\r\nimport { SkipOperator } from 'tfso-repository/lib/linq/operators/skipoperator';\r\nimport { TakeOperator } from 'tfso-repository/lib/linq/operators/takeoperator';\r\n\r\ndescribe(\"When using QueryStream for MsSql queries\", () => {\r\n    var myQuery: Select,\r\n        data: Array<any>;\r\n\r\n    beforeEach(() => {\r\n        data = [\r\n            { no: 1, name: 'ABC' },\r\n            { no: 2, name: 'DEF' },\r\n            { no: 3, name: 'GHI' },\r\n            { no: 4, name: 'JKL' },\r\n            { no: 5, name: 'MNO' },\r\n            { no: 6, name: 'PQR' },\r\n            { no: 7, name: 'STU' },\r\n            { no: 8, name: 'VWX' },\r\n            { no: 9, name: 'YZÆ' },\r\n            { no: 10, name: 'ØÅ1' },\r\n            { no: 11, name: '234' },\r\n            { no: 12, name: '567' },\r\n            { no: 13, name: '890' }\r\n        ];\r\n\r\n        myQuery = new Select(data);\r\n    })\r\n\r\n    it(\"should return all records\", () => {\r\n        return myQuery\r\n            .then(recordset => {\r\n\r\n                assert.equal(recordset.records.length, 13);\r\n            });\r\n    })\r\n\r\n    it(\"should handle paging\", () => {\r\n        myQuery.query.skip(3).take(5);\r\n\r\n        return myQuery\r\n            .then(recordset => {\r\n                assert.equal(recordset.records.length, 5);\r\n                assert.equal(recordset.records[0].name, \"JKL\");\r\n            });\r\n    })\r\n\r\n    it(\"should handle paging with total count for in-memory paging\", () => {\r\n        myQuery = new Select([]);\r\n        myQuery.query.where(it => it.no > 5).skip(3).take(5);\r\n\r\n        myQuery.data = data\r\n            .map(el => {\r\n                return {\r\n                    no: el.no,\r\n                    name: el.name,\r\n                    pagingTotalCount: 8\r\n                };\r\n            }); // totalLength is only available for stream when we have a column named pagingTotalCount (for optimizations)\r\n\r\n        return myQuery\r\n            .then(recordset => {\r\n                assert.equal(recordset.records.length, 5);\r\n                assert.equal(recordset.totalLength, 8);\r\n                assert.equal(recordset.records[0].name, \"YZÆ\");\r\n            })\r\n    })\r\n\r\n    it(\"should handle paging with total count for database paging\", () => {\r\n        myQuery = new Select([]);\r\n        myQuery.query.where(it => it.no > 5).skip(3).take(5);\r\n\r\n\r\n        // since database is doing its paging we should remove the operators\r\n        let skip = myQuery.query.operations.first(SkipOperator);\r\n        let take = myQuery.query.operations.first(TakeOperator);\r\n\r\n        myQuery.query.operations.remove(skip);\r\n        myQuery.query.operations.remove(take);\r\n\r\n        // faking database paging now\r\n        data = data\r\n            .map(el => {\r\n                return {\r\n                    no: el.no,\r\n                    name: el.name,\r\n                    pagingTotalCount: 8\r\n                };\r\n            })\r\n            .filter(it => {\r\n                return it.no > 5\r\n            })\r\n            .slice((<SkipOperator<IModel>>skip).count, (<TakeOperator<IModel>>take).count + (<TakeOperator<IModel>>take).count);\r\n\r\n        myQuery.data = data;\r\n\r\n        return myQuery\r\n            .then(recordset => {\r\n                assert.equal(recordset.records.length, 5);\r\n                assert.equal(recordset.totalLength, 8);\r\n                assert.equal(recordset.records[0].name, \"YZÆ\");\r\n            })\r\n    })\r\n\r\n    it(\"should be able to skip rows\", () => {\r\n        myQuery.query.skip(10);\r\n\r\n        return myQuery\r\n            .then(recordset => {\r\n                assert.equal(recordset.records.length, 3);\r\n                assert.equal(recordset.records[0].name, \"234\");\r\n            });\r\n    })\r\n\r\n    it(\"should be able to take rows\", () => {\r\n        myQuery.query.take(5);\r\n\r\n        return myQuery\r\n            .then(recordset => {\r\n                assert.equal(recordset.records.length, 5);\r\n            });\r\n    })\r\n\r\n    it(\"should be able to override skipping of rows\", () => {\r\n        myQuery.query.skip(3).take(5);\r\n\r\n        var skip = myQuery.query.operations.values().next().value;\r\n            \r\n        myQuery.query.operations.remove(skip);\r\n\r\n        return myQuery\r\n            .then(recordset => {\r\n                assert.equal(recordset.records.length, 5);\r\n                assert.equal(recordset.records[0].name, \"ABC\");\r\n            });\r\n    })\r\n\r\n    it(\"should fail for driver/query problems\", (done) => {\r\n\r\n        myQuery.shouldFail = true;\r\n\r\n        myQuery\r\n            .then((model) => {\r\n                done(new Error('Expected Query promise to fail'));\r\n            }, (err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n\r\n    it(\"should fail for driver/query problems using catch\", (done) => {\r\n\r\n        myQuery.shouldFail = true;\r\n\r\n        myQuery\r\n            .then((model) => {\r\n                done(new Error('Expected Query promise to fail'));\r\n            })\r\n            .catch((err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n\r\n    it(\"should fail for driver/query problems using only catch\", (done) => {\r\n\r\n        myQuery.shouldFail = true;\r\n\r\n        myQuery\r\n            .catch((err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n\r\n    it(\"should fail for driver/query problems using nested catch\", (done) => {\r\n        myQuery.shouldFail = true;\r\n\r\n        Promise.resolve(\r\n            myQuery.then(() => {\r\n                done(new Error('Never going to hit'));\r\n            })\r\n        )\r\n            .catch((err) => {\r\n                if (err.message.toLowerCase() == 'internal mssql error')\r\n                    done();\r\n                else\r\n                    done(err);\r\n            });\r\n    })\r\n})\r\n\r\ninterface IModel {\r\n    no: number\r\n    name: string\r\n}\r\n\r\nclass Select extends QueryStream<IModel>\r\n{\r\n    // for mocking\r\n    public shouldFail = false;\r\n\r\n    constructor(public data: Array<any>) {\r\n        super();\r\n\r\n        this.commandText = \"SELECT *\";\r\n    }\r\n\r\n    protected transform(record) {\r\n        return <IModel>{\r\n            no: record.no,\r\n            name: record.name\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Overriding for mocking as we don't have a valid MsSql connection and request\r\n     */\r\n    protected createRequest(): MsSql.Request {\r\n        if (this.shouldFail) {\r\n            return new RequestMock([], true);\r\n        } else {\r\n            return new RequestMock(this.data);\r\n        }\r\n    }\r\n}"]}